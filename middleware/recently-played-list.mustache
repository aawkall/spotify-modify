// recently-played-list.mustache

{{>constants}}
{{>requests}}

function createRecentlyPlayedList(request, session, config) {
	log("POST /recentlyplayedlist: invoking CreateRecentlyPlayedList");
	var spotifyBaseApi = config.config_data.spotifyBaseApi;

	// Get playlist settings from request body
	var requestBody = JSON.parse(request.Body);
	var historyLength = defaultHistoryLength;
	if (requestBody.hasOwnProperty("history_length") && requestBody.history_length !== "") {
		let requestLength = parseInt(requestBody.history_length, 10);
		if (requestLength < 1 || requestLength > 50 ) {
			log("POST /recentlyplayedlist: invalid history_length provided; returning 400 Bad Request");
			return buildResponse("history_length must be between 1 and 50 inclusive", {}, 400, session);
		}
		historyLength = requestLength;
	}

	var playlistName = (requestBody.hasOwnProperty("playlist_name") && requestBody.playlist_name !== "") ?
		requestBody.playlist_name : defaultPlaylistName + historyLength;
	log("CreateRecentlyPlayedList: Length: " + historyLength + ", Playlist Name: " + playlistName);

	// Fail if access_token not given in request body
	if (!requestBody.hasOwnProperty("access_token") || requestBody.access_token === "") {
		log("POST /recentlyplayedlist: access_token not provided or is empty, returning 400 Bad Request");
		return buildResponse("Spotify access_token for the current user is required", {}, 400, session);
	}
	var accessToken = requestBody.access_token;

	// Get Spotify User ID
	var getUserIdResponse = singleBatchRequest("GET", "", accessToken,
		spotifyBaseApi + "/me");
	if (getUserIdResponse.code !== 200) {
		log("GET via Spotify /me failed:\n" + getUserIdResponse.body);
		return processAndBuildResponse(getUserIdResponse, session);
	}

	// Get list of recently played songs, with given history_length
	var getRecentlyPlayedResponse = singleBatchRequest("GET", "", accessToken,
		spotifyBaseApi + "/me/player/recently-played?limit=" + historyLength);
	if (getRecentlyPlayedResponse.code !== 200) {
		log("GET via Spotify /me/player/recently-played failed:\n" + getRecentlyPlayedResponse.body);
		return processAndBuildResponse(getRecentlyPlayedResponse, session);
	}

	// TODO: handle if the body.items is empty, or if items doesn't match the length requested
	// - add tests for these if you implement them

	// Build list of track URIs to add
	var userId = JSON.parse(getUserIdResponse.body).id;
	var recentlyPlayed = JSON.parse(getRecentlyPlayedResponse.body).items;
	var uriList = [];
	for (var i = 0; i < recentlyPlayed.length; i++) {
		uriList.push(recentlyPlayed[i].track.uri);
	}
	var trackUris = { "uris": uriList };

	// Create playlist with given name
	var createPlaylistBody = {
		"name": playlistName,
		"public": false,
		"collaborative": false,
		"description": playlistDescription
	};
	var createPlaylistResponse = singleBatchRequest("POST", JSON.stringify(createPlaylistBody), accessToken,
		spotifyBaseApi + "/users/" + userId + "/playlists");
	if (createPlaylistResponse.code !== 201) {
		log("POST via Spotify /users/{userId}/playlists failed:\n" + createPlaylistResponse.body);
		return processAndBuildResponse(createPlaylistResponse, session);
	}

	// Get playlist link to return and id for adding songs
	var playlistJSON = JSON.parse(createPlaylistResponse.body);
	var playlistId = playlistJSON.id;
	var playlistUrl = playlistJSON.external_urls.spotify;

	// Add list of recently played songs to the new playlist
	var addTracksResponse = singleBatchRequest("POST", JSON.stringify(trackUris), accessToken,
		spotifyBaseApi + "/users/" + userId + "/playlists/" + playlistId + "/tracks");
	if (addTracksResponse.code !== 201) {
		log("POST via Spotify /users/{userId}/playlists/{playlistId}/tracks failed:\n" + addTracksResponse.body);
		return processAndBuildResponse(addTracksResponse, session);
	}

	// Return back JSON body with url to new playlist
	var responseBody = {
		"playlist_url": playlistUrl
	};
	log("POST /recentlyplayedlist: CreateRecentlyPlayedList finished, sending response");
	return buildResponse(JSON.stringify(responseBody), {}, 200, session);
}